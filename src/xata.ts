// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Contact",
    columns: [
      {
        name: "email",
        type: "email",
        notNull: true,
        defaultValue: "default@gmail.com",
      },
      {
        name: "firstName",
        type: "string",
        notNull: true,
        defaultValue: "default",
      },
      {
        name: "lastName",
        type: "string",
        notNull: true,
        defaultValue: "default",
      },
      { name: "message", type: "text", notNull: true, defaultValue: "default" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Contact = InferredTypes["Contact"];
export type ContactRecord = Contact & XataRecord;

export type DatabaseSchema = {
  Contact: ContactRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://mgehrt1-s-workspace-rcmvmi.us-east-1.xata.sh/db/portfolio-website",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
